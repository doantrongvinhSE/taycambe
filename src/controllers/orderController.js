// controllers/orderController.js
const axios = require('axios');
const Order = require('../models/Order');

// ====== Telegram helper ======
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TELEGRAM_SEND_URL = TELEGRAM_TOKEN
  ? `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`
  : null;

function vnd(n) {
  try {
    return new Intl.NumberFormat('vi-VN').format(n) + ' VND';
  } catch {
    return `${n} VND`;
  }
}

function summarizeItems(items = []) {
  if (!items.length) return '‚Äî';
  // V√≠ d·ª•: 2x √Åo thun (120k), 1x Qu·∫ßn jean (350k)
  return items
    .map(
      (i) =>
        `${i.quantity || 1}x ${i.name || i.sku || 'S·∫£n ph·∫©m'} (${vnd(
          (i.price || 0)
        )})`
    )
    .join(', ');
}

function buildOrderMessage(order, title = 'üõí ƒê∆°n h√†ng m·ªõi') {
  const c = order.customerInfo || {};
  const addr = order.shippingAddress || {};
  const bank = order.bankTransferInfo || {};
  const createdAt = new Date(order.createdAt || Date.now()).toLocaleString('vi-VN');

  return [
    `${title}`,
    `‚Ä¢ M√£ ƒë∆°n: ${order._id}`,
    `‚Ä¢ Kh√°ch: ${c.name || c.fullName || '‚Äî'}`,
    `‚Ä¢ ƒêi·ªán tho·∫°i: ${c.phone || '‚Äî'}`,
    `‚Ä¢ Email: ${c.email || '‚Äî'}`,
    `‚Ä¢ S·∫£n ph·∫©m: ${summarizeItems(order.items)}`,
    `‚Ä¢ T·ªïng ti·ªÅn: ${vnd(order.totalAmount || 0)}`,
    `‚Ä¢ Thanh to√°n: ${order.paymentMethod || '‚Äî'}` +
      (order.paymentStatus ? ` (${order.paymentStatus})` : ''),
    `‚Ä¢ ƒê·ªãa ch·ªâ: ${addr.line1 || ''} ${addr.ward || ''} ${addr.district || ''} ${addr.city || ''}`.replace(/\s+/g,' ').trim() || '‚Äî',
    bank.bankName ? `‚Ä¢ CK: ${bank.bankName} - ${bank.accountNumber} (${bank.accountName})` : null,
    `‚Ä¢ Tr·∫°ng th√°i ƒë∆°n: ${order.orderStatus || 'PENDING'}`,
    `‚Ä¢ Th·ªùi gian: ${createdAt}`,
  ]
    .filter(Boolean)
    .join('\n');
}

async function sendTelegram(text) {
  // Kh√¥ng ch·∫∑n lu·ªìng n·∫øu thi·∫øu config
  if (!TELEGRAM_SEND_URL || !TELEGRAM_CHAT_ID) {
    console.warn('[TELE] thi·∫øu TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID, b·ªè qua g·ª≠i th√¥ng b√°o');
    return;
  }
  try {
    await axios.post(TELEGRAM_SEND_URL, {
      chat_id: TELEGRAM_CHAT_ID,
      text,
      // Kh√¥ng d√πng Markdown/HTML ƒë·ªÉ kh·ªèi ph·∫£i escape k√Ω t·ª±
      disable_web_page_preview: true,
    });
  } catch (err) {
    // Kh√¥ng l√†m fail API ch√≠nh n·∫øu Tele l·ªói
    console.error('[TELE] G·ª≠i Telegram th·∫•t b·∫°i:', err?.response?.data || err.message);
  }
}

// ====== Controllers ======

// T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
  try {
    const {
      customerInfo,
      items,
      shippingAddress,
      paymentMethod,
      bankTransferInfo
    } = req.body;

    // T√≠nh t·ªïng ti·ªÅn
    const totalAmount = (items || []).reduce((total, item) => {
      return total + ((item.price || 0) * (item.quantity || 1));
    }, 0);

    const order = new Order({
      customerInfo,
      items,
      totalAmount,
      shippingAddress,
      paymentMethod,
      bankTransferInfo: paymentMethod === 'BANK_TRANSFER' ? bankTransferInfo : undefined,
      // ƒë·∫£m b·∫£o c√≥ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
      orderStatus: 'PENDING',
      paymentStatus: undefined,
    });

    await order.save();

    // G·ª≠i Telegram: ƒê∆°n h√†ng m·ªõi
    sendTelegram(buildOrderMessage(order, 'üõí ƒê∆°n h√†ng m·ªõi'));

    res.status(201).json({
      success: true,
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng theo email
exports.getOrdersByEmail = async (req, res) => {
  try {
    const { email } = req.params;
    const orders = await Order.find({ 'customerInfo.email': email })
      .sort('-createdAt');

    res.status(200).json({
      success: true,
      data: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng theo s·ªë ƒëi·ªán tho·∫°i
exports.getOrdersByPhone = async (req, res) => {
  try {
    const { phone } = req.params;
    const orders = await Order.find({ 'customerInfo.phone': phone })
      .sort('-createdAt');

    res.status(200).json({
      success: true,
      data: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// L·∫•y chi ti·∫øt m·ªôt ƒë∆°n h√†ng
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    res.status(200).json({
      success: true,
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
exports.updatePaymentStatus = async (req, res) => {
  try {
    const { paymentStatus, bankTransferInfo } = req.body;
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t khi thanh to√°n b·∫±ng chuy·ªÉn kho·∫£n
    if (order.paymentMethod !== 'BANK_TRANSFER') {
      return res.status(400).json({
        success: false,
        error: 'Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho ƒë∆°n h√†ng chuy·ªÉn kho·∫£n'
      });
    }

    order.paymentStatus = paymentStatus;
    if (bankTransferInfo) {
      order.bankTransferInfo = bankTransferInfo;
    }

    await order.save();

    // G·ª≠i Telegram: c·∫≠p nh·∫≠t thanh to√°n
    sendTelegram(buildOrderMessage(order, 'üí≥ C·∫≠p nh·∫≠t thanh to√°n'));

    res.status(200).json({
      success: true,
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (l·ªçc)
exports.getAllOrders = async (req, res) => {
  try {
    const { status, paymentMethod, startDate, endDate } = req.query;
    
    const filter = {};
    if (status) filter.orderStatus = status;
    if (paymentMethod) filter.paymentMethod = paymentMethod;
    if (startDate && endDate) {
      filter.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }

    const orders = await Order.find(filter).sort('-createdAt');

    res.status(200).json({
      success: true,
      data: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
exports.updateOrderStatus = async (req, res) => {
  try {
    const { orderStatus } = req.body;
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    const validStatuses = ['PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED'];
    if (!validStatuses.includes(orderStatus)) {
      return res.status(400).json({
        success: false,
        error: 'Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    order.orderStatus = orderStatus;
    await order.save();

    // G·ª≠i Telegram: c·∫≠p nh·∫≠t tr·∫°ng th√°i
    sendTelegram(buildOrderMessage(order, `üì¶ Tr·∫°ng th√°i: ${orderStatus}`));

    res.status(200).json({
      success: true,
      data: order
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};
